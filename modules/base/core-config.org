#+title: base core
#+OPTIONS: num:nil
#+PROPERTY: header-args :tangle yes

* TODO Core settings
- Note taken on [2022-05-13 Fri 01:40] \\
  This really needs lots of work.
- Note taken on [2022-05-06 Fri 14:17] \\
  I want to get to a consistent use of use-package. So hooks and other config should be tucked inside a use-package macro not just dangling in mid air.
- Note taken on [2022-05-06 Fri 09:07] \\
  This is all just too much! It is a cluster fuck that has just become a monster over time. Got to get this under control.
** performance stuff
#+begin_src elisp
  ;; -*- lexical-binding: t; -*-

  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 16777216 ; 16mb
                    gc-cons-percentage 0.1)
              ))
#+end_src
** TODO emacs default settings
- Note taken on [2022-05-13 Fri 01:41] \\
  Group settings to make easier to edit & maintain
#+begin_src elisp
  (use-package emacs
    :custom ((inhibit-startup-screen t)
             (inhibit-startup-echo-area-message user-login-name)
             (inhibit-default-init t)
             (initial-major-mode 'fundamental-mode)
             (initial-scratch-message "")
             (dired-dwim-target t)
             (frame-title-format '("%b"))
             (ring-bell-function 'ignore)
             (linum-format "%4d ")                ; Line number format
             (auto-mode-case-fold nil)
             (bidi-inhibit-bpa t)  ; Emacs 27 only
             (highlight-nonselected-windows nil)
             (fast-but-imprecise-scrolling t)
             (browse-url-browser-function 'eww-browse-url)
             (x-select-enable-clipboard t)
             (save-interprogram-paste-before-kill t)
             (ffap-machine-p-known 'reject)
             (frame-inhibit-implied-resize t)
             (idle-update-delay 1.0)  ; default is 0.5
             (inhibit-compacting-font-caches t)
             (pgtk-wait-for-event-timeout 0.001)
             (read-process-output-max (* 64 1024))  ; 64kb
             (redisplay-skip-fontification-on-input t)
             (disabled-command-function nil)
             (command-line-ns-option-alist nil)
             (ad-redefinition-action 'accept)
             (debug-on-error init-file-debug
                             jka-compr-verbose init-file-debug)
             (abbrev-file-name (concat user-emacs-directory "abbrev_defs"))
             (save-abbrevs 'silent)
             (abbrev-mode t)
             (help-window-select t)))

  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)
  (delete-selection-mode 1)
  (global-auto-revert-mode t)
  (electric-pair-mode t)
  (recentf-mode)
  (add-hook 'before-save-hook
            'delete-trailing-whitespace)

  (setq-default cursor-type 'bar)
  (setq-default frame-title-format '("%b"))
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)
  (setq-default cursor-in-non-selected-windows nil)

  ;; for a less cluttered dired
  (setq dired-omit-files
        (rx (or (seq bol (? ".") "#")     ;; emacs autosave files
                (seq bol "." (not (any "."))) ;; dot-files
                (seq "~" eol)                 ;; backup-files
                (seq bol "CVS" eol)           ;; CVS dirs
                )))

  (setq custom-file (concat user-emacs-directory "custom.el"))
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
    ;;; Load custom file. Don't hide errors. Hide success message
  (load custom-file nil t)

  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
  (setq
   backup-by-copying t                                        ; Avoid symlinks
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   auto-save-list-file-prefix emacs-tmp-dir
   auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))  ; Change autosave dir to tmp
   backup-directory-alist `((".*" . ,emacs-tmp-dir)))

  (setq create-lockfiles nil)

  ;; Just found out about these.
  ;; (setq completion-styles '(initials partial-completion flex)) ; > Emacs 27.1
  ;; (setq completion-cycle-threshold 10)

  (setq view-read-only t)

  (diminish 'abbrev-mode)
#+end_src
** make magit work with git credential manager
One way that I work is using git/magit in eshell. This setting makes eshell, git, magit, emacs play together well
#+begin_src elisp
    (setenv "GCM_CREDENTIAL_STORE" "gpg")
#+end_src
** some hooks
#+begin_src elisp
  (add-hook 'prog-mode-hook
            (if (and (fboundp 'display-line-numbers-mode) (display-graphic-p))
                #'display-line-numbers-mode
              #'linum-mode))

  (unless (daemonp)
    (advice-add #'tty-run-terminal-initialization :override #'ignore)
    (add-hook 'window-setup-hook
              (lambda ()
                (advice-remove #'tty-run-terminal-initialization #'ignore)
                (tty-run-terminal-initialization (selected-frame) nil t))))

  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))

  (add-hook 'occur-hook (lambda () (switch-to-buffer-other-window "*Occur*")))

  ;; Sensible line breaking
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src
** some org defaults
#+begin_src elisp
  (use-package org-defaults
    :defer t
    :custom ((org-src-window-setup 'current-window)))
#+end_src
* statistics
#+begin_src elisp
  (setq use-package-compute-statistics t)
#+end_src
* functions
** backward kill word
I stole this and a bunch of other stuff from [[https://sanemacs.com/][Sanemacs]] because I think it is a really great config with lots of handy tweaks. Lots of stuff I knew nothing about. It helped me a lot.
  #+begin_src elisp
  (defun mu/backward-kill-word ()
    (interactive "*")
    (push-mark)
    (backward-word)
    (delete-region (point) (mark)))
  #+end_src
** create new module
#+begin_src elisp
  (defun mu--save-module-buffer ()
    (write-file (concat modular-config-path "/"
                        (completing-read "Module dir: "
                                         '("base" "stable" "private" "testing")) "/" (buffer-name))))

  (defun mu--insert-module-org-headings (mu-mod-name)
    "Insert module headings"

    (setq mu-mod-head (concat "#+title: " mu-mod-name "\n"
                              "#+OPTIONS: num:nil" "\n"
                              "#+PROPERTY: header-args :tangle yes" "\n" "\n"))
          (save-excursion
            (save-restriction
              (widen)
              (goto-char (point-min))
              (insert mu-mod-head))))

    (defun mu-new-module-buffer ()
      "Create a new empty buffer."
      (interactive)
      (setq mu-module-name (completing-read "Name module: " nil))
      (let (($buf (generate-new-buffer (concat mu-module-name "-config.org"))))
        (switch-to-buffer $buf)
        ;; (funcall (intern org-mode))
        (org-mode)
        (mu--insert-module-org-headings mu-module-name)
        (mu--save-module-buffer)
        $buf
        ))
#+end_src
** TODO reload config
- Note taken on [2022-05-13 Fri 01:47] \\
  I have an idea. I think I might make this tangle init.el from README.org
- Note taken on [2022-05-06 Fri 01:26] \\
  This needs work. Need to decide how and which file to use. Really, init isn't all that important.
  #+begin_src elisp
  (defun reload-config ()
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))
  #+end_src
** COMMENT insert org header
This is a bit of nonsense
#+begin_src elisp
  (defun insert-org-header ()
      (interactive)
    (insert "*"))
#+end_src
** module functions
This works. Surprised me how useful just these two little keybinds were.
#+begin_src elisp
  (defun mu-open-modules-dir ()
    (interactive)
    (dired-jump nil (concat user-emacs-directory "modules/")))
  (global-set-key (kbd "S-<f8>") #'mu-open-modules-dir)

  (defun mu-open-emacs-dir ()
    (interactive)
    (dired-jump nil user-emacs-directory))
  (global-set-key (kbd "S-<f9>") #'mu-open-emacs-dir)
#+end_src
** COMMENT eval dwim
- Note taken on [2022-05-13 Fri 01:48] \\
  So this seems not to work. Put a pin in it and circle back.
#+begin_src elisp
  (defun mu-eval-dwim (beginning end)
    (interactive "r")
    (when (use-region-p)
      (eval-region beginning end)
      (eval-buffer)))

  (global-set-key (kbd "<f5>") #'mu-eval-dwim)
#+end_src
** find modules
Again stupid handy
Stole parts of this from [[https://emacs.stackexchange.com/questions/12334/elisp-for-applying-command-to-only-the-selected-region][StackExchange:Elisp for applying command to only the selected region]]
On my laptop, I just clone the repo to ~/.config/emacs and in that case I can use this function to search for the module I want.
#+begin_src elisp
  (defun mu-find-modules ()
    (interactive)
    (consult-find (concat user-emacs-directory "modules/")))
  (global-set-key (kbd "M-s f") #'mu-find-modules)
#+end_src
** gchm
I saw a reddit about this package and tried it. I am not sure it helps (I don't really notice it) but it doesn't hurt. You decide.
[[https://github.com/emacsmirror/gcmh][GCMH - the Garbage Collector Magic Hack]]
#+begin_src elisp
(use-package gcmh
  :straight t
  :custom
  (gcmh-idle-delay 'auto "Default is 15s")
  (gcmh-auto-idle-delay-factor 10)
  (gcmh-high-cons-threshold (* 16 1024 1024) "16MB"))
#+end_src
** COMMENT eshell here
I wanna say I stole this from [[http://www.howardism.org/][Howard Abrams]] I think he posted it on a reddit thread.
I don't use the /eshell/x/ function but I included it for completeness.
#+begin_src elisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
      current buffer's file. The eshell is renamed to match that
      directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)

  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+end_src
** eshell after quit
This is what I use instead of /eshell/x/ this works all the time, every time. I don't want eshell windows hanging around when the process has ended.
Stolen from [[https://stackoverflow.com/questions/51867693/emacs-eshell-kill-window-on-exit][Stack Exchange:Emacs eshell - Kill window on exit]]
#+begin_src elisp
  (require 'eshell)

  (defun my-custom-func ()
    (when (not (one-window-p))
      (delete-window)))

  (advice-add 'eshell-life-is-too-much :after 'my-custom-func)
#+end_src
**  eshell jump to recently visited files
Stole this from [[https://karthinks.com/software/jumping-directories-in-eshell/][Karthinks]] about to steal some more stuff!
#+begin_src elisp
  (defun eshell/z (&optional regexp)
    "Navigate to a previously visited directory in eshell, or to
  any directory proferred by `consult-dir'."
    (let ((eshell-dirs (delete-dups
                        (mapcar 'abbreviate-file-name
                                (ring-elements eshell-last-dir-ring)))))
      (cond
       ((and (not regexp) (featurep 'consult-dir))
        (let* ((consult-dir--source-eshell `(:name "Eshell"
                                                   :narrow ?e
                                                   :category file
                                                   :face consult-file
                                                   :items ,eshell-dirs))
               (consult-dir-sources (cons consult-dir--source-eshell
                                          consult-dir-sources)))
          (eshell/cd (substring-no-properties
                      (consult-dir--pick "Switch directory: ")))))
       (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
                       (completing-read "cd: " eshell-dirs)))))))
#+end_src
** DONE tangle all modules
- Note taken on [2022-05-13 Fri 14:49] \\
  That was easy. Brainfart
- Note taken on [2022-05-13 Fri 14:42] \\
  Fix module path. Maybe make it a constant defined in /core/
This works. Tangles everything under /modules/ If you change the name of that directory you'll need to change the path in this function.
I need to fix that.
#+begin_src elisp
  (defun mu-tangle-modules ()
    (interactive)
    " Recursively tangle all modules under the default module directory"
    (setq tangl-modul-lst
          ;; (directory-files-recursively (concat user-emacs-directory )"modules/"  "\\.org\\'" t)
          (directory-files-recursively modular-config-path  "\\.org\\'" t))

    (dolist (element tangl-modul-lst)
      (print element)
      (org-babel-tangle-file element)))
#+end_src
** COMMENT miniedit
I don't remember what this does.
#+begin_src elisp
(use-package miniedit
  :straight t
  :commands minibuffer-edit
  :init (miniedit-install))
#+end_src
