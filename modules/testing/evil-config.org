#+title: evil configuration
#+OPTIONS: num:nil
#+PROPERTY: header-args :tangle yes

* lets be evil
All of this was stolen from [[https://gist.github.com/progfolio/1c96a67fcec7584b31507ef664de36cc][progfolio/general-spacemacs.org]] and slightly modified to sorta fit my needs
* general
#+begin_src elisp
  (use-package general
    :straight t
    :commands (general-define-key
               general-def))
#+end_src
** evil mode
    #+begin_src elisp
      (use-package evil
        :straight t
        :commands (evil-mode)
        :custom ((evil-undo-system 'undo-fu)
                 (evil-want-C-i-jump nil))
        :init
        (evil-mode 1)
        (general-evil-setup t)
        )
    #+end_src
** evil-org
#+begin_src elisp
  (use-package evil-org
    :straight t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
* keybindings for evil
** Define global prefix
#+begin_src elisp
  (general-create-definer global-definer
    :keymaps 'override
    :states  '(insert emacs normal hybrid motion visual operator)
    :prefix  "SPC"
    :non-normal-prefix "S-SPC")
#+end_src
** create definer
#+begin_src elisp
  (global-definer
   "!"   'shell-command
   ":"   'eval-expression)
#+end_src
** define macro for creating nested menus
#+begin_src elisp
  (defmacro +general-global-menu! (name infix-key &rest body)
    "Create a definer named +general-global-NAME wrapping global-definer.
  Create prefix map: +general-global-NAME. Prefix bindings in BODY with INFIX-KEY."
    (declare (indent 2))
    `(progn
       (general-create-definer ,(intern (concat "+general-global-" name))
         :wrapping global-definer
         :prefix-map (quote ,(intern (concat "+general-global-" name "-map")))
         :infix ,infix-key
         :wk-full-keys nil
         "" '(:ignore t :which-key ,name))
       (,(intern (concat "+general-global-" name))
        ,@body)))
#+end_src
** contextual leader key
#+begin_src elisp
  (general-create-definer global-leader
    :keymaps 'override
    :states '(emacs normal hybrid motion visual operator)
    :prefix "SPC m"
    "" '(:ignore t :which-key (lambda (arg) `(,(cadr (split-string (car arg) " ")) . ,(replace-regexp-in-string "-mode$" "" (symbol-name major-mode))))))
#+end_src
** emacs lisp mode menu
#+begin_src elisp
  (use-package elisp-mode
    ;;this is a built in package, so we don't want to try and install it
    :ensure nil
    :general
    (global-leader
      ;;specify the major modes these should apply to:
      :major-modes
      '(emacs-lisp-mode lisp-interaction-mode t)
      ;;and the keymaps:
      :keymaps
      '(emacs-lisp-mode-map lisp-interaction-mode-map)
      "e" '(:ignore t :which-key "eval")
      "eb" 'eval-buffer
      "ed" 'eval-defun
      "ee" 'eval-expression
      "ep" 'pp-eval-last-sexp
      "es" 'eval-last-sexp
      "i" 'elisp-index-search))
#+end_src
** define a global buffer menu
#+begin_src elisp
  (+general-global-menu! "buffer" "b"
                         "b"	'consult-buffer
                         "d"	'kill-current-buffer
                         "o"	'((lambda () (interactive) (switch-to-buffer nil))
                                 :which-key "other-buffer")
                         "p"	'previous-buffer
                         "r"	'rename-buffer
                         "M"	'((lambda () (interactive) (switch-to-buffer "*Messages*"))
                                 :which-key "messages-buffer")
                         "n"	'next-buffer
                         "s"	'((lambda () (interactive) (switch-to-buffer "*scratch*"))
                                 :which-key "scratch-buffer")
                         "TAB"	'((lambda () (interactive) (switch-to-buffer nil))
                                    :which-key "other-buffer")
                         "q"     'bury-buffer
                         )
#+end_src
** define custom user menu
#+begin_src elisp
  (+general-global-menu! "custom" "c"
                         "a" 'org-agenda
                         "b" 'consult-bookmark
                         "c" 'org-capture
                         "e" 'eval-buffer
                         "g" 'gnus
                         "h" 'consult-history
                         "k" 'consult-macro
                         "l" 'caps-lock-mode
                         "m" 'consult-mode-command
                         "q" 'vr/query-replace
                         "r" 'reload-config
                         "t" 'consult-theme)
#+end_src
** leftover junk
#+begin_src elisp
  (general-def evil-normal-state-map
    "." #'consult-complex-command
    "z+" #'text-scale-adjust
    "zu" #'zap-up-to-char
    "zp" #'consult-yank-pop
    )

  (general-def evil-motion-state-map
    "M-d" #'evil-scroll-up)

  (general-def
    :prefix "C-h"
    "M" #'consult-man)

  (general-define-key
   :keymaps 'normal
   "E" #'evil-end-of-line-or-visual-line)

  (general-def dired-mode-map
    "z a" #'dired-omit-mode)
#+end_src
